ECS Fargate Task Patching

Documentation and Pipeline Example:

- https://falcon.crowdstrike.com/documentation/page/a5c297cc/deploy-falcon-container-sensor-for-linux-on-ecs-fargate#s2a77e24
- https://github.com/TomRyan-321/crowdstrike-ecs-fargate-pipepline-demo/actions/runs/10868500078/workflow

# Download the script for pulling the Falcon container sensor.
curl -sSL -o falcon-container-sensor-pull.sh "https://github.com/CrowdStrike/falcon-scripts/releases/latest/download/falcon-container-sensor-pull.sh"
chmod +x falcon-container-sensor-pull.sh

# Generate an API key in the Falcon UI with "Read" scope for both Images Download API and Sensor Download API.
export FALCON_CLIENT_ID=16a0752725c94037bba17e846403e01f
export FALCON_CLIENT_SECRET=k52Y7AhuoUQjJC3m1TSZ0Ke4XXXXX

# Use the downloaded script to get your CrowdStrike CID.
export FALCON_CID=$(./falcon-container-sensor-pull.sh -t falcon-container --get-cid)

# Specify the private ECR repository where the Falcon container sensor will be stored.
export PRIVATE_REPO=517716713836.dkr.ecr.us-east-1.amazonaws.com/mckenzie-images

# Get the latest sensor image version and tag it for pushing to the private ECR.
export LATESTSENSOR=$(./falcon-container-sensor-pull.sh -t falcon-container | tail -1) && echo $LATESTSENSOR
docker tag "$LATESTSENSOR" "$PRIVATE_REPO":falcon-container-sensor-latest

# Log in to the private ECR repository using AWS CLI.
aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin "$PRIVATE_REPO"

# Push the tagged Falcon container sensor image to your ECR repository.
export FALCON_IMAGE_URI="$PRIVATE_REPO":falcon-container-sensor-latest
docker push $FALCON_IMAGE_URI

# Define the name of the ECS task to be patched.
export TASK_NAME=Webserver

# Generate a token for accessing the private ECR registry. This will be used by the patching utility.
# MAC Example (arm64 architecture)
IMAGE_PULL_TOKEN=$(echo "{\"auths\":{\"$PRIVATE_REPO""\":{\"auth\":\"$(echo AWS:$(aws ecr get-login-password --region us-east-1)|base64 )\"}}}" | base64)
# Linux Example (x86 architecture)
IMAGE_PULL_TOKEN=$(echo "{\"auths\":{\"$PRIVATE_REPO""\":{\"auth\":\"$(echo AWS:$(aws ecr get-login-password --region us-east-1)|base64 -w 0 )\"}}}" | base64 -w 0)


#The task definition spec file directory: "~/devops/ECS" is the location of the unpatched task definition
#The task definition is binded to this mount point inside of the patching utility/container image: "/var/run/spec" DO NOT CHANGE
#The "-ecs-spec-file" specifies a ECS unpatched task definition file or a CloudFormation template (JSON or YAML). ONLY UPDATE $TASKNAME
#-pulltoken is required when pulling from registries that require authentication. This token is passed to the patching uiltity as it needs to access the container image referrence in the task definition.


# The task definition should be stored locally before patching. Here, the patched version is saved alongside the unpatched one.
# MAC w/ M1 chip (example)
docker run --platform linux/amd64 -v ~/devops/ECS:/var/run/spec --rm $FALCON_IMAGE_URI \
-cid $FALCON_CID -image $FALCON_IMAGE_URI \
-ecs-spec-file /var/run/spec/"$TASK_NAME".json \
-pulltoken "$IMAGE_PULL_TOKEN" >~/devops/ECS/"$TASK_NAME"_patched.json

# Linux/MAC w/ Intel chip (example)
docker run --platform linux -v ~/devops/ECS:/var/run/spec --rm $FALCON_IMAGE_URI \
-cid $FALCON_CID -image $FALCON_IMAGE_URI \
-ecs-spec-file /var/run/spec/detection_container_TD_unpatched.json \
-pulltoken "$IMAGE_PULL_TOKEN" >~/devops/ECS/"$TASK_NAME"_patched.json

# Register the patched task definition with ECS using the AWS CLI.
aws ecs register-task-definition --cli-input-json file://$HOME/devops/ECS/"$TASK_NAME"_patched.json 1>/dev/null
